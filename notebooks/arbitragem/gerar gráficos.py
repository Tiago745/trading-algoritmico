# -*- coding: utf-8 -*-
"""Cópia de Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G7juj492wjyfUzAaLC4znOeSA5ruXtiP
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np

#leitura
df = pd.read_excel('retornos.xlsx')

# Verificacao
df.head()

#Conversão para timestamp e criação de colunas auxiliares
df['timestamp'] = pd.to_datetime(df['timestamp'])
df['date'] = df['timestamp'].dt.date
df['hour'] = df['timestamp'].dt.hour

colunas = ['Ativo1', 'Ativo2', 'capital_continuo']
df[colunas] = df[colunas].apply(pd.to_numeric, errors='coerce')

'''Normalizando para o gráfico'''
#Não mais necessário

base_ativo1 = df['Ativo1'].iloc[0]
base_ativo2 = df['Ativo2'].iloc[0]
base_capital = df['capital_continuo'].iloc[0]

#Coluna de variacao acumulada
df['ativo1_trend'] = ((df['Ativo1'] / base_ativo1) - 1) *100
df['ativo2_trend'] = ((df['Ativo2'] / base_ativo2) - 1) *100
df['capital_trend'] = ((df['capital_continuo'] / base_capital) - 1)*100

'''Criacao do grafico com todo o df'''
plt.figure(figsize=(22, 10))
plt.plot(df['timestamp'], df['ativo1_trend'], label='Ativo 1', color='navy', linewidth=2)
plt.plot(df['timestamp'], df['ativo2_trend'], label='Ativo 2', color='darkgreen', linewidth=2)
plt.plot(df['timestamp'], df['capital_trend'], label='Capital', color='black', linestyle='--', linewidth=2.5)

plt.title('Variação Acumulada dos Ativos e do Capital', fontsize=18)
plt.xlabel('Data e Hora', fontsize=14)
plt.ylabel('Variação Relativa (%)', fontsize=14)
plt.grid(True, which='major', linestyle='--', linewidth=0.7, alpha=0.7)
plt.minorticks_on()
plt.grid(True, which='minor', linestyle=':', linewidth=0.5, alpha=0.4)
plt.xticks(rotation=45)
plt.legend(fontsize=13)
plt.tight_layout()
plt.savefig('Variação Acumulada.png', dpi = 300)
plt.show()

# Identificar quando muda o sinal
df['sinal_shift'] = df['sinal'].shift(1)
df['sinal_neutro'] = (df['sinal'] == 'neutro') & (df['sinal'] != df['sinal_shift'])
df['sinal_c1v2'] = (df['sinal'] == 'compra_1_vende_2') & (df['sinal'] != df['sinal_shift'])
df['sinal_c2v1'] = (df['sinal'] == 'vende_1_compra_2') & (df['sinal'] != df['sinal_shift'])

# Converter a coluna timestamp para datetime
df['timestamp'] = pd.to_datetime(df['timestamp'])
df['limite_mais'] = 1.5
df['limite_menos'] = -1.5

# Plotar o gráfico
plt.figure(figsize=(15, 6))

# Linhas principais
plt.plot(df['timestamp'], df['zscore'])
#plt.plot(df['timestamp'], df['ativo2_std_preco'], label='Ativo 2')
plt.plot(df['timestamp'], df['limite_mais'],linestyle='--', color = 'orange')
plt.plot(df['timestamp'], df['limite_menos'],linestyle='--', color = 'orange')

# Marcar trocas de sinal no Ativo 1
plt.scatter(df[df['sinal_neutro']]['timestamp'], df[df['sinal_neutro']]['zscore'],
            marker='x', s=120, color='gray', label='Troca para Neutro', zorder=5)
plt.scatter(df[df['sinal_c1v2']]['timestamp'], df[df['sinal_c1v2']]['zscore'],
            marker='x', s=120, color='red', label='Troca para Compra 1 / Vende 2', zorder=5)
plt.scatter(df[df['sinal_c2v1']]['timestamp'], df[df['sinal_c2v1']]['zscore'],
            marker='x', s=120, color='orange', label='Troca para Compra 2 / Vende 1', zorder=5)

# Títulos e legendas
plt.title('Zscore do spread')
plt.xlabel('Data')
plt.ylabel('valor')
plt.legend()
plt.grid(True)
plt.tight_layout()

plt.savefig('zscore_spread.png', dpi = 300)
plt.show()

# Cria uma figura com 1 linha e 2 colunas para os subgráficos
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

# --- Plotando o Ativo1 ---
ax1.plot(df['timestamp'], df['Ativo1'], label='Ativo1', color='purple', linewidth=2)
ax1.set_title('Evolução do Ativo 1')
ax1.set_xlabel('Data')
ax1.set_ylabel('Valor')
ax1.legend()
ax1.grid(False)

# --- Plotando o Ativo2 ---
ax2.plot(df['timestamp'], df['Ativo2'], label='Ativo2', color='green', linewidth=2)
ax2.set_title('Evolução do Ativo 2')
ax2.set_xlabel('Data')
ax2.set_ylabel('Valor')
ax2.legend()
ax2.grid(False)

# Ajusta o layout para evitar que os títulos e rótulos se sobreponham
plt.tight_layout()

# Exibe o gráfico
plt.savefig('Valor absoluto dos ativos.png')
plt.show()
